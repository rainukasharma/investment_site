{"ast":null,"code":"var _jsxFileName = \"/home/renuka/Desktop/Investment site/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport UserInput from \"./Components/UserInput/UserInput\";\nimport ResultsTable from \"./Components/ResultsTable/ResultsTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = userInput => {\n    //this userinput is received from userinput component\n\n    setUserInput(userInput);\n\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    // do something with yearlyData ...\n  };\n\n  const yearlyData = []; // per-year results\n  if (userInput) {\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), !userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Investments Calculated yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 22\n    }, this), userInput && /*#__PURE__*/_jsxDEV(ResultsTable, {\n      data: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fCXvCeCdp/eInhYAy188SZ+/4/8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","UserInput","ResultsTable","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","data","_c","$RefreshReg$"],"sources":["/home/renuka/Desktop/Investment site/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport UserInput from \"./Components/UserInput/UserInput\";\nimport ResultsTable from \"./Components/ResultsTable/ResultsTable\";\n\n\nfunction App() {\n\n  const [userInput,setUserInput] = useState(null);\n\n\n  const calculateHandler = (userInput) => {   //this userinput is received from userinput component\n\n    setUserInput(userInput)\n  \n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    // do something with yearlyData ...\n  };\n\n  const yearlyData = []; // per-year results\n  if(userInput){\n\n\n\n  let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput[\"expected-return\"] / 100;\n  const duration = +userInput[\"duration\"];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution,\n    });\n  }\n\n  }\n\n  return (\n    <div>\n      <Header />\n\n      <UserInput onCalculate = {calculateHandler}/>\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      \n      {!userInput && <p>No Investments Calculated yet.</p>}\n      {userInput && <ResultsTable  data={yearlyData} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAOC,YAAY,MAAM,wCAAwC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAG/C,MAAMU,gBAAgB,GAAIF,SAAS,IAAK;IAAI;;IAE1CC,YAAY,CAACD,SAAS,CAAC;;IAEvB;IACA;IACA;EACF,CAAC;;EAED,MAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;EACvB,IAAGH,SAAS,EAAC;IAIb,IAAII,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMK,kBAAkB,GAAG,CAACL,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMM,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMO,QAAQ,GAAG,CAACP,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;EAEA;EAEA,oBACER,OAAA;IAAAgB,QAAA,gBACEhB,OAAA,CAACJ,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVpB,OAAA,CAACH,SAAS;MAACwB,WAAW,EAAIhB;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAK5C,CAACjB,SAAS,iBAAIH,OAAA;MAAAgB,QAAA,EAAG;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACnDjB,SAAS,iBAAIH,OAAA,CAACF,YAAY;MAAEwB,IAAI,EAAEhB;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV;AAAClB,EAAA,CApDQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAsDZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}